{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Getting Recs from Tumblr\n",
    "Given a rec list from Tumblr like mine, trying to extract a list of links (fanfic recs). Also trying to extract a header image given a blog name."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pytumblr\n",
    "from ao3 import AO3\n",
    "from ao3.works import RestrictedWork\n",
    "import ffnet\n",
    "from notion.client import NotionClient"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "ao3 = AO3()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {},
   "outputs": [],
   "source": [
    "client = NotionClient(token_v2=\"token here")\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [],
   "source": [
    "# From tumblr API console https://api.tumblr.com/console\n",
    "# Authenticate via OAuth\n",
    "client = pytumblr.TumblrRestClient(\n",
    "  'yIn5BsgXKPGlR4OoHsFV6jT4KC0PeJQ3cGe0mQvSGbT8QGA95k',\n",
    "  'qbET4dR9xMAntDJTwemIlZucJkpucS2Tm0CZlRdq6yOpvdbozt',\n",
    "  'JtfABFskd8FpPmptIbNnUJdaaZICuoJHafcGy4YAi8luiBRzRX',\n",
    "  'vtVGOENMCaforhI1kUniUlDYjWCASI2eiKzOhlBkuIheQPPpOw'\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [],
   "source": [
    "## post url options\n",
    "# https://starrybouquet.tumblr.com/post/620329944196710401/heya-any-suggestions-for-good-affinity-fix-it\n",
    "# https://samcaarter.tumblr.com/private/621914267347795968/tumblr_qchqnjlukx1r9gqxq\n",
    "# https://professortennant.tumblr.com/post/175193322905/samjack-rec-list-pt-1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'starrybouquet.tumblr.com'"
      ]
     },
     "execution_count": 163,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "post_url = \"https://starrybouquet.tumblr.com/post/620329944196710401/heya-any-suggestions-for-good-affinity-fix-it\"\n",
    "if \"/post/\" in post_url:\n",
    "    post_url_split = post_url.partition(\"/post/\")\n",
    "elif \"/private/\" in post_url:\n",
    "    post_url_split = post_url.partition(\"/private/\")\n",
    "post_username = post_url_split[0].partition(\"https://\")[2]\n",
    "post_id = post_url_split[2].partition(\"/\")[0]\n",
    "post_username # check it worked"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [],
   "source": [
    "post = client.posts(post_username, id=post_id)['posts'][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [],
   "source": [
    "content = post['trail'][0]['content'].split('<')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [],
   "source": [
    "sites = {'ao3': 'archiveofourown.org',\n",
    "            'ffn': 'fanfiction.net'}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Link(object):\n",
    "    '''link from html rec list'''\n",
    "    \n",
    "    def __init__(self, raw_link):\n",
    "        \n",
    "        self.link = raw_link\n",
    "        self.id = '-1'\n",
    "        \n",
    "        if sites['ao3'] in self.link:\n",
    "            self.site = 'ao3'\n",
    "        elif sites['ffn'] in self.link:\n",
    "            self.site = 'ffn'\n",
    "        else:\n",
    "            self.site = 'other'\n",
    "            \n",
    "    def __str__(self):\n",
    "        return self.link\n",
    "    \n",
    "    def get_site(self):\n",
    "        return self.site\n",
    "    \n",
    "    def get_id(self):\n",
    "        return self.id\n",
    "    \n",
    "    def get_link(self):\n",
    "        return self.link\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Work(Link):\n",
    "    '''works from ao3 or ffn'''\n",
    "    \n",
    "    def __init__(self, raw_link):\n",
    "        super().__init__(raw_link)\n",
    "        if self.site == 'ao3':\n",
    "            self.id = self.link.partition('/works/')[2]\n",
    "            try:\n",
    "                me = ao3.work(id=self.id)\n",
    "            except RestrictedWork:\n",
    "                self.title = 'restricted; please enter manually'\n",
    "                self.desc = 'restricted; please enter manually'\n",
    "                self.author = 'restricted; please enter manually'\n",
    "                self.rating = 'restricted; please enter manually'\n",
    "            self.title = me.title\n",
    "            self.desc = me.summary\n",
    "            self.author = me.author # may want to connect to author class\n",
    "            if (me.rating[0]=='Mature') or (me.rating[0]=='Explicit'):\n",
    "                self.isAdult = True\n",
    "            else:\n",
    "                self.isAdult = False\n",
    "            \n",
    "        elif self.site == 'ffn':\n",
    "            self.id = self.link.partition('/s/')[2].partition('/')[0]\n",
    "            me = ffnet.Story(id=self.id)\n",
    "            me.download_data()\n",
    "            self.title = me.title\n",
    "            self.desc = me.description\n",
    "            self.author = me.author_id\n",
    "            if me.rated == 'M':\n",
    "                self.isAdult = True\n",
    "            else:\n",
    "                self.isAdult = False\n",
    "                \n",
    "    def __str__(self):\n",
    "        return \"Work '{}'' at {}\".format(self.title, self.link)\n",
    "            \n",
    "    def get_title(self):\n",
    "        return self.title\n",
    "    \n",
    "    def get_desc(self):\n",
    "        return self.desc\n",
    "    \n",
    "    def check_notion_for_work(self, notionUrl):\n",
    "        pass\n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Author(Link):\n",
    "    '''author from ao3 or ffn'''\n",
    "    \n",
    "    def __init__(self, raw_link):\n",
    "        super().__init__(raw_link)\n",
    "        if self.site == 'ao3':\n",
    "            self.id = self.link.partition('/users/')[2].partition('/')[0]\n",
    "        elif self.site == 'ffn':\n",
    "            self.id = self.link.partition('/u/')[2].partition('/')[0]\n",
    "    \n",
    "    def find_name(self):\n",
    "        '''find name on web'''\n",
    "        pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [],
   "source": [
    "authors = []\n",
    "works = []\n",
    "for line in content:\n",
    "    if \"href=\" in line:\n",
    "        link = line.split('\"')[1]\n",
    "        if ('/u/' in link) or ('/users/' in link):\n",
    "            authors.append(Author(link))\n",
    "        elif ('/s/' in link) or ('/works/' in link):\n",
    "            works.append(Work(link))\n",
    "        else:\n",
    "            print('{} is invalid link'.format(link))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "metadata": {},
   "outputs": [],
   "source": [
    "cv = client.get_collection_view(\"https://www.notion.so/d5e49bd35fbe462ab9194d81a73eeb76?v=b0d28b38236148cfa34ad0fde954a948\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'2001'"
      ]
     },
     "execution_count": 229,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fics = cv.collection.get_rows()\n",
    "work_titles = [work.get_title() for work in works]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
